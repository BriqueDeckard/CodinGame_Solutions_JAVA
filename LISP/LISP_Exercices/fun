;;   (defun longueur (l) 
;;     (if 
;;         (null l) 0 
;;         (+ 1 
;;             (longueur 
;;                 (cdr l)))))

;;  (defun dernier (l) (if (null (cdr l)) (car l) (dernier (cdr l))))

;;  PRESENT
;;  (defun present (x l) (cond
;;  ((eq x (car l)) t)
;;  ((null (cdr l))nil)
;;  (t (present x (cdr l)))))
;;  
;;  (present 'z '(a b c))
;;  T

;;  // Define rev with a list for parameter
;;  (defun rev (l)
;;  //  (cond       (test1      action1)
;;      (cond       ((null l)   '()    )
;;  //
;;                  (T (append (rev (cdr l)) (list (car l))))
;;  )
;;  )

;; (cl-user::quit)
